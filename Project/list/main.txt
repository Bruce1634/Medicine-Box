; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\main.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\obj\main.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\User\inc -I"D:\Program Files\Keil_v5\ARM\RV31\INC" -I"D:\Program Files\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"D:\Program Files\Keil_v5\ARM\Inc\ST\STM32F10x" -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\main.crf ..\..\User\src\main.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  main PROC
;;;22     
;;;23     int main()
000000  2120              MOVS     r1,#0x20
;;;24     {    
;;;25     
;;;26     	
;;;27     		memset(&motor_up,0,sizeof(MOTOR));
000002  4835              LDR      r0,|L1.216|
000004  f7fffffe          BL       __aeabi_memclr4
;;;28     		memset(&motor_down,0,sizeof(MOTOR));
000008  2120              MOVS     r1,#0x20
00000a  4834              LDR      r0,|L1.220|
00000c  f7fffffe          BL       __aeabi_memclr4
;;;29     		memset(&motorPID_up,0,sizeof(PIDPARA));
000010  211c              MOVS     r1,#0x1c
000012  4833              LDR      r0,|L1.224|
000014  f7fffffe          BL       __aeabi_memclr4
;;;30     		memset(&motorPID_down,0,sizeof(PIDPARA));
000018  211c              MOVS     r1,#0x1c
00001a  4832              LDR      r0,|L1.228|
00001c  f7fffffe          BL       __aeabi_memclr4
;;;31     		memset(&position_down,0,sizeof(POSITION));
000020  2118              MOVS     r1,#0x18
000022  4831              LDR      r0,|L1.232|
000024  f7fffffe          BL       __aeabi_memclr4
;;;32     		memset(&positionPID_down,0,sizeof(PIDPARA)); 
000028  211c              MOVS     r1,#0x1c
00002a  4830              LDR      r0,|L1.236|
00002c  f7fffffe          BL       __aeabi_memclr4
;;;33     	  n = 0;
000030  2000              MOVS     r0,#0
000032  492f              LDR      r1,|L1.240|
000034  6008              STR      r0,[r1,#0]  ; n
;;;34     		
;;;35     	
;;;36     		motor_up.VelocityExpect = 0;
000036  4928              LDR      r1,|L1.216|
000038  60c8              STR      r0,[r1,#0xc]  ; motor_up
;;;37     		motor_up.INPWM_Uplimit = 2400;
00003a  f44f6016          MOV      r0,#0x960
00003e  6188              STR      r0,[r1,#0x18]  ; motor_up
;;;38     		motor_up.INPWM_Lowlimit = -2400;
000040  4240              RSBS     r0,r0,#0
000042  61c8              STR      r0,[r1,#0x1c]  ; motor_up
;;;39     		motor_up.SampleTime = 1;
000044  2001              MOVS     r0,#1
000046  6088              STR      r0,[r1,#8]  ; motor_up
;;;40     		motorPID_up.Kp = 100;
000048  482a              LDR      r0,|L1.244|
00004a  4925              LDR      r1,|L1.224|
00004c  6008              STR      r0,[r1,#0]  ; motorPID_up
;;;41     		motorPID_up.Ki = 0.1;
00004e  482a              LDR      r0,|L1.248|
000050  6048              STR      r0,[r1,#4]  ; motorPID_up
;;;42     		motorPID_up.Kd = 0;
000052  2000              MOVS     r0,#0
000054  6088              STR      r0,[r1,#8]  ; motorPID_up
;;;43     	
;;;44     	
;;;45     		motor_down.INPWM_Uplimit = 2400;
000056  f44f6016          MOV      r0,#0x960
00005a  4920              LDR      r1,|L1.220|
00005c  6188              STR      r0,[r1,#0x18]  ; motor_down
;;;46     		motor_down.INPWM_Lowlimit = -2400;
00005e  4240              RSBS     r0,r0,#0
000060  61c8              STR      r0,[r1,#0x1c]  ; motor_down
;;;47     		motor_down.SampleTime = 1;
000062  2001              MOVS     r0,#1
000064  6088              STR      r0,[r1,#8]  ; motor_down
;;;48     		motorPID_down.Kp = 100;
000066  4823              LDR      r0,|L1.244|
000068  491e              LDR      r1,|L1.228|
00006a  6008              STR      r0,[r1,#0]  ; motorPID_down
;;;49     		motorPID_down.Ki = 0.1;
00006c  4822              LDR      r0,|L1.248|
00006e  6048              STR      r0,[r1,#4]  ; motorPID_down
;;;50     		motorPID_down.Kd = 0;
000070  2000              MOVS     r0,#0
000072  6088              STR      r0,[r1,#8]  ; motorPID_down
;;;51     		position_down.PositionCurrent = 0;
000074  2100              MOVS     r1,#0
000076  4a1c              LDR      r2,|L1.232|
000078  6091              STR      r1,[r2,#8]  ; position_down
00007a  60d1              STR      r1,[r2,#0xc]  ; position_down
;;;52     		positionPID_down.Kp = 0.0150;
00007c  481f              LDR      r0,|L1.252|
00007e  491b              LDR      r1,|L1.236|
000080  6008              STR      r0,[r1,#0]  ; positionPID_down
;;;53     		positionPID_down.Ki = 0.0000001;
000082  481f              LDR      r0,|L1.256|
000084  6048              STR      r0,[r1,#4]  ; positionPID_down
;;;54     		positionPID_down.Kd = 0.5;
000086  f04f507c          MOV      r0,#0x3f000000
00008a  6088              STR      r0,[r1,#8]  ; positionPID_down
;;;55     		
;;;56     		interval = 11810;
00008c  f6426022          MOV      r0,#0x2e22
000090  491c              LDR      r1,|L1.260|
000092  6008              STR      r0,[r1,#0]  ; interval
;;;57     	
;;;58     	
;;;59     	  RCC_Configuration();
000094  f7fffffe          BL       RCC_Configuration
;;;60     	  GPIO_Configuration();
000098  f7fffffe          BL       GPIO_Configuration
;;;61     		SysTick_Init();
00009c  f7fffffe          BL       SysTick_Init
;;;62     		USART_Configuration();	
0000a0  f7fffffe          BL       USART_Configuration
;;;63     		NVIC_Configuration();
0000a4  f7fffffe          BL       NVIC_Configuration
;;;64     		USART_ITConfig(USART1,USART_IT_RXNE,ENABLE);//开启串口接收中断
0000a8  2201              MOVS     r2,#1
0000aa  f2405125          MOV      r1,#0x525
0000ae  4816              LDR      r0,|L1.264|
0000b0  f7fffffe          BL       USART_ITConfig
;;;65     		USART_Cmd(USART1, ENABLE);
0000b4  2101              MOVS     r1,#1
0000b6  4814              LDR      r0,|L1.264|
0000b8  f7fffffe          BL       USART_Cmd
;;;66     	  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;  //开系统定时中断
0000bc  f04f20e0          MOV      r0,#0xe000e000
0000c0  6900              LDR      r0,[r0,#0x10]
0000c2  f0400001          ORR      r0,r0,#1
0000c6  f04f21e0          MOV      r1,#0xe000e000
0000ca  6108              STR      r0,[r1,#0x10]
;;;67     		Encoder_Configration();
0000cc  f7fffffe          BL       Encoder_Configration
;;;68     		TIM8_PWM_Output();
0000d0  f7fffffe          BL       TIM8_PWM_Output
;;;69     							  	
;;;70     
;;;71     
;;;72     	while(1)
0000d4  bf00              NOP      
                  |L1.214|
0000d6  e7fe              B        |L1.214|
;;;73     	{	
;;;74     		
;;;75     			
;;;76     	}	
;;;77     
;;;78        
;;;79     
;;;80     }
;;;81     
                          ENDP

                  |L1.216|
                          DCD      motor_up
                  |L1.220|
                          DCD      motor_down
                  |L1.224|
                          DCD      motorPID_up
                  |L1.228|
                          DCD      motorPID_down
                  |L1.232|
                          DCD      position_down
                  |L1.236|
                          DCD      positionPID_down
                  |L1.240|
                          DCD      n
                  |L1.244|
                          DCD      0x42c80000
                  |L1.248|
                          DCD      0x3dcccccd
                  |L1.252|
                          DCD      0x3c75c28f
                  |L1.256|
                          DCD      0x33d6bf95
                  |L1.260|
                          DCD      interval
                  |L1.264|
                          DCD      0x40013800

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  motor_up
                          %        32
                  motor_down
                          %        32
                  motorPID_up
                          %        28
                  motorPID_down
                          %        28
                  position_up
                          %        24
                  position_down
                          %        24
                  positionPID_up
                          %        28
                  positionPID_down
                          %        28
                  RxBuffer
                          %        12
                  RxRcv
                          %        12

                          AREA ||.data||, DATA, ALIGN=2

                  n
                          DCD      0x00000000
                  m
                          DCD      0x00000000
                  flag
000008  00                DCB      0x00
                  down_flag
000009  00                DCB      0x00
                  count_Up
00000a  00                DCB      0x00
                  count_Down
00000b  00                DCB      0x00
                  flag0
00000c  00                DCB      0x00
                  down_flag0
00000d  00                DCB      0x00
                  count_Up0
00000e  00                DCB      0x00
                  count_Down0
00000f  00                DCB      0x00
                  flag1
000010  00                DCB      0x00
                  down_flag1
000011  00                DCB      0x00
                  count_Up1
000012  00                DCB      0x00
                  count_Down1
000013  00                DCB      0x00
                  interval
                          DCD      0x00000000
                  med_num
                          DCD      0x00000001
                  cell_num
                          DCD      0x00000001

                  __ARM_use_no_argv EQU 0
