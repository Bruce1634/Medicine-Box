; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\motion.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\obj\motion.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\User\inc -I"D:\Program Files\Keil_v5\ARM\RV31\INC" -I"D:\Program Files\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"D:\Program Files\Keil_v5\ARM\Inc\ST\STM32F10x" -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\motion.crf ..\..\User\src\motion.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=1

                  CalcSpeedPID PROC
;;;20     */
;;;21     int32_t CalcSpeedPID(MOTOR* Motor,PIDPARA* MotorPID)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;22     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;23     		MotorPID->LastError = MotorPID->Error;
000008  68e8              LDR      r0,[r5,#0xc]
00000a  6128              STR      r0,[r5,#0x10]
;;;24     		MotorPID->Error = Motor->VelocityExpect - Motor->VelocityCurrent;
00000c  e9d41203          LDRD     r1,r2,[r4,#0xc]
000010  1a88              SUBS     r0,r1,r2
000012  f7fffffe          BL       __aeabi_i2f
000016  60e8              STR      r0,[r5,#0xc]
;;;25     		MotorPID->Integral += MotorPID->Error;
000018  68e9              LDR      r1,[r5,#0xc]
00001a  6968              LDR      r0,[r5,#0x14]
00001c  f7fffffe          BL       __aeabi_fadd
000020  6168              STR      r0,[r5,#0x14]
;;;26     		MotorPID->Differ = (MotorPID->Error -MotorPID->LastError) / Motor->SampleTime;
000022  68a0              LDR      r0,[r4,#8]
000024  f7fffffe          BL       __aeabi_i2f
000028  4606              MOV      r6,r0
00002a  e9d50103          LDRD     r0,r1,[r5,#0xc]
00002e  f7fffffe          BL       __aeabi_fsub
000032  4607              MOV      r7,r0
000034  4631              MOV      r1,r6
000036  f7fffffe          BL       __aeabi_fdiv
00003a  61a8              STR      r0,[r5,#0x18]
;;;27     	
;;;28     		Motor->INPWM = MotorPID->Error*MotorPID->Kp + MotorPID->Integral*MotorPID->Ki + MotorPID->Differ*MotorPID->Kd;
00003c  68a9              LDR      r1,[r5,#8]
00003e  69a8              LDR      r0,[r5,#0x18]
000040  f7fffffe          BL       __aeabi_fmul
000044  4680              MOV      r8,r0
000046  6869              LDR      r1,[r5,#4]
000048  6968              LDR      r0,[r5,#0x14]
00004a  f7fffffe          BL       __aeabi_fmul
00004e  4681              MOV      r9,r0
000050  6829              LDR      r1,[r5,#0]
000052  68e8              LDR      r0,[r5,#0xc]
000054  f7fffffe          BL       __aeabi_fmul
000058  4682              MOV      r10,r0
00005a  4649              MOV      r1,r9
00005c  f7fffffe          BL       __aeabi_fadd
000060  4607              MOV      r7,r0
000062  4641              MOV      r1,r8
000064  f7fffffe          BL       __aeabi_fadd
000068  4606              MOV      r6,r0
00006a  f7fffffe          BL       __aeabi_f2iz
00006e  6160              STR      r0,[r4,#0x14]
;;;29     		Motor->INPWM = (Motor->INPWM <= Motor->INPWM_Uplimit) && (Motor->INPWM >= Motor->INPWM_Lowlimit) ? \
000070  e9d40105          LDRD     r0,r1,[r4,#0x14]
000074  4288              CMP      r0,r1
000076  dc05              BGT      |L1.132|
000078  69e1              LDR      r1,[r4,#0x1c]
00007a  6960              LDR      r0,[r4,#0x14]
00007c  4288              CMP      r0,r1
00007e  db01              BLT      |L1.132|
;;;30     										Motor->INPWM : \
000080  6960              LDR      r0,[r4,#0x14]
000082  e006              B        |L1.146|
                  |L1.132|
;;;31     									  (Motor->INPWM > Motor->INPWM_Uplimit ? Motor->INPWM_Uplimit : Motor->INPWM_Lowlimit);
000084  e9d40105          LDRD     r0,r1,[r4,#0x14]
000088  4288              CMP      r0,r1
00008a  dd01              BLE      |L1.144|
00008c  69a0              LDR      r0,[r4,#0x18]
00008e  e000              B        |L1.146|
                  |L1.144|
000090  69e0              LDR      r0,[r4,#0x1c]
                  |L1.146|
000092  6160              STR      r0,[r4,#0x14]
;;;32     		return Motor->INPWM;
000094  6960              LDR      r0,[r4,#0x14]
;;;33     										
;;;34     }
000096  e8bd87f0          POP      {r4-r10,pc}
;;;35     /*
                          ENDP

                  CalcPositionPID PROC
;;;40     */
;;;41     int CalcPositionPID(POSITION *Position,PIDPARA *PositionPID,MOTOR* Motor)
00009a  e92d5ffc          PUSH     {r2-r12,lr}
;;;42     {
00009e  4681              MOV      r9,r0
0000a0  460c              MOV      r4,r1
0000a2  4692              MOV      r10,r2
;;;43     		Position->PositionCurrent += Motor->VelocityCurrent * Motor->SampleTime;
0000a4  f8da2008          LDR      r2,[r10,#8]
0000a8  f8da1010          LDR      r1,[r10,#0x10]
0000ac  fb01f002          MUL      r0,r1,r2
0000b0  f7fffffe          BL       __aeabi_i2d
0000b4  4607              MOV      r7,r0
0000b6  e9d95302          LDRD     r5,r3,[r9,#8]
0000ba  462a              MOV      r2,r5
0000bc  f7fffffe          BL       __aeabi_dadd
0000c0  e9c90102          STRD     r0,r1,[r9,#8]
;;;44     		PositionPID->LastError = PositionPID->Error;
0000c4  68e0              LDR      r0,[r4,#0xc]
0000c6  6120              STR      r0,[r4,#0x10]
;;;45     		PositionPID->Error = Position->PositionExpect - Position->PositionCurrent;
0000c8  e9d95302          LDRD     r5,r3,[r9,#8]
0000cc  462a              MOV      r2,r5
0000ce  e9d97100          LDRD     r7,r1,[r9,#0]
0000d2  4638              MOV      r0,r7
0000d4  f7fffffe          BL       __aeabi_dsub
0000d8  e9cd0100          STRD     r0,r1,[sp,#0]
0000dc  f7fffffe          BL       __aeabi_d2f
0000e0  60e0              STR      r0,[r4,#0xc]
;;;46     		PositionPID->Integral += PositionPID->Error;
0000e2  68e1              LDR      r1,[r4,#0xc]
0000e4  6960              LDR      r0,[r4,#0x14]
0000e6  f7fffffe          BL       __aeabi_fadd
0000ea  6160              STR      r0,[r4,#0x14]
;;;47     		PositionPID->Differ = (PositionPID->Error - PositionPID->LastError) / Motor->SampleTime;
0000ec  f8da0008          LDR      r0,[r10,#8]
0000f0  f7fffffe          BL       __aeabi_i2f
0000f4  4605              MOV      r5,r0
0000f6  e9d40103          LDRD     r0,r1,[r4,#0xc]
0000fa  f7fffffe          BL       __aeabi_fsub
0000fe  4606              MOV      r6,r0
000100  4629              MOV      r1,r5
000102  f7fffffe          BL       __aeabi_fdiv
000106  61a0              STR      r0,[r4,#0x18]
;;;48     	
;;;49     		Position->VelocityExpect = PositionPID->Error*PositionPID->Kp \
000108  68a1              LDR      r1,[r4,#8]
00010a  69a0              LDR      r0,[r4,#0x18]
00010c  f7fffffe          BL       __aeabi_fmul
000110  4607              MOV      r7,r0
000112  6861              LDR      r1,[r4,#4]
000114  6960              LDR      r0,[r4,#0x14]
000116  f7fffffe          BL       __aeabi_fmul
00011a  4680              MOV      r8,r0
00011c  6821              LDR      r1,[r4,#0]
00011e  68e0              LDR      r0,[r4,#0xc]
000120  f7fffffe          BL       __aeabi_fmul
000124  4683              MOV      r11,r0
000126  4641              MOV      r1,r8
000128  f7fffffe          BL       __aeabi_fadd
00012c  4606              MOV      r6,r0
00012e  4639              MOV      r1,r7
000130  f7fffffe          BL       __aeabi_fadd
000134  4605              MOV      r5,r0
000136  f7fffffe          BL       __aeabi_f2d
00013a  e9c90104          STRD     r0,r1,[r9,#0x10]
;;;50     														 + PositionPID->Integral*PositionPID->Ki \
;;;51     														 + PositionPID->Differ*PositionPID->Kd;
;;;52     	
;;;53     		Motor->VelocityExpect = Position->VelocityExpect;
00013e  e9d92104          LDRD     r2,r1,[r9,#0x10]
000142  4610              MOV      r0,r2
000144  f7fffffe          BL       __aeabi_d2iz
000148  f8ca000c          STR      r0,[r10,#0xc]
;;;54     	
;;;55     		return 0;
00014c  2000              MOVS     r0,#0
;;;56     		
;;;57     }
00014e  e8bd9ffc          POP      {r2-r12,pc}
;;;58     /*
                          ENDP

                  DetectVelocity PROC
;;;64     */
;;;65     int DetectVelocity(MOTOR *Motor,TIM_TypeDef* TIMx)
000152  b570              PUSH     {r4-r6,lr}
;;;66     {    
000154  4604              MOV      r4,r0
000156  460e              MOV      r6,r1
;;;67     	
;;;68     		int32_t EncoderDelta;
;;;69         Motor->EncoderPrevious = Motor->EncoderCurrent;
000158  6860              LDR      r0,[r4,#4]
00015a  6020              STR      r0,[r4,#0]
;;;70         Motor->EncoderCurrent = TIM_GetCounter(TIMx);            //编码器的读数
00015c  4630              MOV      r0,r6
00015e  f7fffffe          BL       TIM_GetCounter
000162  6060              STR      r0,[r4,#4]
;;;71         
;;;72     		if( (Motor->EncoderCurrent < 0x2000) && (Motor->EncoderPrevious > 0xd000) )           // 超过上界//
000164  6860              LDR      r0,[r4,#4]
000166  f5b05f00          CMP      r0,#0x2000
00016a  da09              BGE      |L1.384|
00016c  6820              LDR      r0,[r4,#0]
00016e  f5b04f50          CMP      r0,#0xd000
000172  dd05              BLE      |L1.384|
;;;73     			{
;;;74     				EncoderDelta = Motor->EncoderCurrent - Motor->EncoderPrevious + 0x10000;   //正转//                                
000174  e9d41000          LDRD     r1,r0,[r4,#0]
000178  1a40              SUBS     r0,r0,r1
00017a  f5003580          ADD      r5,r0,#0x10000
00017e  e019              B        |L1.436|
                  |L1.384|
;;;75     	   	}
;;;76     	  else if( (Motor->EncoderCurrent > 0xd000) && (Motor->EncoderPrevious < 0x2000) )    // 超过下界//
000180  6860              LDR      r0,[r4,#4]
000182  f5b04f50          CMP      r0,#0xd000
000186  dd0a              BLE      |L1.414|
000188  6820              LDR      r0,[r4,#0]
00018a  f5b05f00          CMP      r0,#0x2000
00018e  da06              BGE      |L1.414|
;;;77     	   	{
;;;78     				EncoderDelta= -(Motor->EncoderPrevious - Motor->EncoderCurrent + 0x10000); //正转//                                                                               
000190  e9d40100          LDRD     r0,r1,[r4,#0]
000194  1a40              SUBS     r0,r0,r1
000196  f5003080          ADD      r0,r0,#0x10000
00019a  4245              RSBS     r5,r0,#0
00019c  e00a              B        |L1.436|
                  |L1.414|
;;;79     	   	}		
;;;80     	  else if( Motor->EncoderCurrent > Motor->EncoderPrevious )
00019e  e9d41000          LDRD     r1,r0,[r4,#0]
0001a2  4288              CMP      r0,r1
0001a4  dd03              BLE      |L1.430|
;;;81     	   	{
;;;82     				EncoderDelta = Motor->EncoderCurrent - Motor->EncoderPrevious;             //正转//
0001a6  e9d41000          LDRD     r1,r0,[r4,#0]
0001aa  1a45              SUBS     r5,r0,r1
0001ac  e002              B        |L1.436|
                  |L1.430|
;;;83     	   	}
;;;84     	  else
;;;85     	   	{
;;;86     				EncoderDelta= -(Motor->EncoderPrevious - Motor->EncoderCurrent);           //反转//                                                     
0001ae  e9d41000          LDRD     r1,r0,[r4,#0]
0001b2  1a45              SUBS     r5,r0,r1
                  |L1.436|
;;;87     	   	} 
;;;88     		
;;;89     		Motor->VelocityCurrent = EncoderDelta / Motor->SampleTime;
0001b4  68a0              LDR      r0,[r4,#8]
0001b6  fb95f0f0          SDIV     r0,r5,r0
0001ba  6120              STR      r0,[r4,#0x10]
;;;90     			
;;;91     		return 0;
0001bc  2000              MOVS     r0,#0
;;;92     	  
;;;93     }
0001be  bd70              POP      {r4-r6,pc}
;;;94     
                          ENDP

