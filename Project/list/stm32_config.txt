; generated by Component: ARM Compiler 5.04 update 1 (build 49) Tool: ArmCC [5040049]
; commandline ArmCC [--list --debug -c --asm --interleave -o..\obj\stm32_config.o --asm_dir=..\list\ --list_dir=..\list\ --depend=..\obj\stm32_config.d --cpu=Cortex-M3 --apcs=interwork -O0 -I..\..\Libraries\STM32F10x_StdPeriph_Driver\inc -I..\..\Libraries\CMSIS\CM3\CoreSupport -I..\..\Libraries\CMSIS\CM3\DeviceSupport\ST\STM32F10x -I..\..\User\inc -I"D:\Program Files\Keil_v5\ARM\RV31\INC" -I"D:\Program Files\Keil_v5\ARM\PACK\ARM\CMSIS\3.20.4\CMSIS\Include" -I"D:\Program Files\Keil_v5\ARM\Inc\ST\STM32F10x" -DSTM32F10X_MD -DSTM32F10X_MD -DUSE_STDPERIPH_DRIVER --omf_browse=..\obj\stm32_config.crf ..\..\User\src\stm32_config.c]
                          THUMB

                          AREA ||.text||, CODE, READONLY, ALIGN=2

                  SysTick_Init PROC
;;;2      
;;;3      void SysTick_Init(void)
000000  b530              PUSH     {r4,r5,lr}
;;;4      {
;;;5      	if(SysTick_Config(SystemCoreClock / 1000))
000002  48ab              LDR      r0,|L1.688|
000004  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
000006  f44f727a          MOV      r2,#0x3e8
00000a  fbb0f1f2          UDIV     r1,r0,r2
00000e  f1b17f80          CMP      r1,#0x1000000
000012  d301              BCC      |L1.24|
000014  2001              MOVS     r0,#1
000016  e01d              B        |L1.84|
                  |L1.24|
000018  f021407f          BIC      r0,r1,#0xff000000
00001c  1e40              SUBS     r0,r0,#1
00001e  f04f22e0          MOV      r2,#0xe000e000
000022  6150              STR      r0,[r2,#0x14]
000024  1750              ASRS     r0,r2,#29
000026  220f              MOVS     r2,#0xf
000028  2800              CMP      r0,#0
00002a  da07              BGE      |L1.60|
00002c  0713              LSLS     r3,r2,#28
00002e  0e1d              LSRS     r5,r3,#24
000030  4ba0              LDR      r3,|L1.692|
000032  f000040f          AND      r4,r0,#0xf
000036  1f24              SUBS     r4,r4,#4
000038  551d              STRB     r5,[r3,r4]
00003a  e003              B        |L1.68|
                  |L1.60|
00003c  0713              LSLS     r3,r2,#28
00003e  0e1c              LSRS     r4,r3,#24
000040  4b9d              LDR      r3,|L1.696|
000042  541c              STRB     r4,[r3,r0]
                  |L1.68|
000044  bf00              NOP      
000046  2000              MOVS     r0,#0
000048  f04f22e0          MOV      r2,#0xe000e000
00004c  6190              STR      r0,[r2,#0x18]
00004e  2007              MOVS     r0,#7
000050  6110              STR      r0,[r2,#0x10]
000052  2000              MOVS     r0,#0
                  |L1.84|
000054  b108              CBZ      r0,|L1.90|
;;;6      	{
;;;7      		while(1);
000056  bf00              NOP      
                  |L1.88|
000058  e7fe              B        |L1.88|
                  |L1.90|
;;;8      	}
;;;9      	SysTick->CTRL &= ~ SysTick_CTRL_ENABLE_Msk;
00005a  f04f20e0          MOV      r0,#0xe000e000
00005e  6900              LDR      r0,[r0,#0x10]
000060  f0200001          BIC      r0,r0,#1
000064  f04f21e0          MOV      r1,#0xe000e000
000068  6108              STR      r0,[r1,#0x10]
;;;10     }
00006a  bd30              POP      {r4,r5,pc}
;;;11     
                          ENDP

                  RCC_Configuration PROC
;;;13     
;;;14     void RCC_Configuration(void)
00006c  b510              PUSH     {r4,lr}
;;;15     {
;;;16      	RCC_APB2PeriphClockCmd(RCC_APB2Periph_TIM8 | RCC_APB2Periph_USART1 | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_TIM1, ENABLE);
00006e  2101              MOVS     r1,#1
000070  f646001c          MOV      r0,#0x681c
000074  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;17     	RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2 | RCC_APB1Periph_TIM3  | RCC_APB1Periph_TIM4, ENABLE);
000078  2101              MOVS     r1,#1
00007a  2007              MOVS     r0,#7
00007c  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;18     
;;;19     }
000080  bd10              POP      {r4,pc}
;;;20     
                          ENDP

                  GPIO_Configuration PROC
;;;21     void GPIO_Configuration(void)
000082  b508              PUSH     {r3,lr}
;;;22     {
;;;23       GPIO_InitTypeDef GPIO_InitStructure;
;;;24     
;;;25     
;;;26       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6 | GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9;
000084  f44f7070          MOV      r0,#0x3c0
000088  f8ad0000          STRH     r0,[sp,#0]
;;;27       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00008c  2003              MOVS     r0,#3
00008e  f88d0002          STRB     r0,[sp,#2]
;;;28       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000092  2018              MOVS     r0,#0x18
000094  f88d0003          STRB     r0,[sp,#3]
;;;29       GPIO_Init(GPIOB, &GPIO_InitStructure);
000098  4669              MOV      r1,sp
00009a  4888              LDR      r0,|L1.700|
00009c  f7fffffe          BL       GPIO_Init
;;;30     	
;;;31     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10 | GPIO_Pin_11|GPIO_Pin_12|GPIO_Pin_13;
0000a0  f44f5070          MOV      r0,#0x3c00
0000a4  f8ad0000          STRH     r0,[sp,#0]
;;;32       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000a8  2003              MOVS     r0,#3
0000aa  f88d0002          STRB     r0,[sp,#2]
;;;33       GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
0000ae  2010              MOVS     r0,#0x10
0000b0  f88d0003          STRB     r0,[sp,#3]
;;;34       GPIO_Init(GPIOB, &GPIO_InitStructure);
0000b4  4669              MOV      r1,sp
0000b6  4881              LDR      r0,|L1.700|
0000b8  f7fffffe          BL       GPIO_Init
;;;35     
;;;36       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6|GPIO_Pin_7|GPIO_Pin_0|GPIO_Pin_2;
0000bc  20c5              MOVS     r0,#0xc5
0000be  f8ad0000          STRH     r0,[sp,#0]
;;;37       GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
0000c2  2003              MOVS     r0,#3
0000c4  f88d0002          STRB     r0,[sp,#2]
;;;38       GPIO_InitStructure.GPIO_Mode =  GPIO_Mode_IPD;
0000c8  2028              MOVS     r0,#0x28
0000ca  f88d0003          STRB     r0,[sp,#3]
;;;39       GPIO_Init(GPIOC, &GPIO_InitStructure);
0000ce  4669              MOV      r1,sp
0000d0  487b              LDR      r0,|L1.704|
0000d2  f7fffffe          BL       GPIO_Init
;;;40     
;;;41     	//GPIO_WriteBit(GPIOB, GPIO_Pin_10, Bit_SET);
;;;42     	//GPIO_WriteBit(GPIOB, GPIO_Pin_11, Bit_RESET);
;;;43     	
;;;44     	
;;;45     }
0000d6  bd08              POP      {r3,pc}
;;;46     
                          ENDP

                  NVIC_Configuration PROC
;;;52     
;;;53     void NVIC_Configuration(void)					   					//???????
0000d8  b508              PUSH     {r3,lr}
;;;54     {
;;;55     	NVIC_InitTypeDef NVIC_InitStructure;
;;;56     	NVIC_PriorityGroupConfig(NVIC_PriorityGroup_1);				   //??1?,??3?
0000da  f44f60c0          MOV      r0,#0x600
0000de  f7fffffe          BL       NVIC_PriorityGroupConfig
;;;57     
;;;58     //	NVIC_InitStructure.NVIC_IRQChannel = TIM1_CC_IRQn;
;;;59     //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
;;;60     //	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;61     //	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;62     //	NVIC_Init(&NVIC_InitStructure);
;;;63     
;;;64     	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
0000e2  2025              MOVS     r0,#0x25
0000e4  f88d0000          STRB     r0,[sp,#0]
;;;65     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
0000e8  2000              MOVS     r0,#0
0000ea  f88d0001          STRB     r0,[sp,#1]
;;;66     	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
0000ee  f88d0002          STRB     r0,[sp,#2]
;;;67     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
0000f2  2001              MOVS     r0,#1
0000f4  f88d0003          STRB     r0,[sp,#3]
;;;68     	NVIC_Init(&NVIC_InitStructure);
0000f8  4668              MOV      r0,sp
0000fa  f7fffffe          BL       NVIC_Init
;;;69     //
;;;70     //	NVIC_InitStructure.NVIC_IRQChannel = TIM2_IRQn;
;;;71     //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;72     //	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 0;
;;;73     //	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;74     //	NVIC_Init(&NVIC_InitStructure);
;;;75     //
;;;76     //	NVIC_InitStructure.NVIC_IRQChannel = TIM3_IRQn;
;;;77     //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;78     //	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
;;;79     //	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;80     //	NVIC_Init(&NVIC_InitStructure);
;;;81     //
;;;82     //	NVIC_InitStructure.NVIC_IRQChannel = TIM4_IRQn;
;;;83     //	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 1;
;;;84     //	NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
;;;85     //	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
;;;86     	NVIC_Init(&NVIC_InitStructure);
0000fe  4668              MOV      r0,sp
000100  f7fffffe          BL       NVIC_Init
;;;87     }
000104  bd08              POP      {r3,pc}
;;;88     
                          ENDP

                  USART_Configuration PROC
;;;89     
;;;90     void USART_Configuration(void)
000106  b500              PUSH     {lr}
;;;91     {
000108  b085              SUB      sp,sp,#0x14
;;;92     	USART_InitTypeDef USART_InitStructure;
;;;93     
;;;94     	GPIO_InitTypeDef GPIO_InitStructure;
;;;95     	
;;;96     	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00010a  f44f7000          MOV      r0,#0x200
00010e  f8ad0000          STRH     r0,[sp,#0]
;;;97     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
000112  2018              MOVS     r0,#0x18
000114  f88d0003          STRB     r0,[sp,#3]
;;;98     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000118  2003              MOVS     r0,#3
00011a  f88d0002          STRB     r0,[sp,#2]
;;;99     	GPIO_Init(GPIOA, &GPIO_InitStructure);
00011e  4669              MOV      r1,sp
000120  4868              LDR      r0,|L1.708|
000122  f7fffffe          BL       GPIO_Init
;;;100    
;;;101    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000126  f44f6080          MOV      r0,#0x400
00012a  f8ad0000          STRH     r0,[sp,#0]
;;;102    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
00012e  2004              MOVS     r0,#4
000130  f88d0003          STRB     r0,[sp,#3]
;;;103    	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
000134  2003              MOVS     r0,#3
000136  f88d0002          STRB     r0,[sp,#2]
;;;104    	GPIO_Init(GPIOA, &GPIO_InitStructure);	 
00013a  4669              MOV      r1,sp
00013c  4861              LDR      r0,|L1.708|
00013e  f7fffffe          BL       GPIO_Init
;;;105    
;;;106    	USART_InitStructure.USART_BaudRate = 19200;
000142  f44f4096          MOV      r0,#0x4b00
000146  9001              STR      r0,[sp,#4]
;;;107    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000148  2000              MOVS     r0,#0
00014a  f8ad0008          STRH     r0,[sp,#8]
;;;108    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00014e  f8ad000a          STRH     r0,[sp,#0xa]
;;;109    	USART_InitStructure.USART_Parity = USART_Parity_No;
000152  f8ad000c          STRH     r0,[sp,#0xc]
;;;110    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000156  f8ad0010          STRH     r0,[sp,#0x10]
;;;111    	USART_InitStructure.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
00015a  200c              MOVS     r0,#0xc
00015c  f8ad000e          STRH     r0,[sp,#0xe]
;;;112    
;;;113    	USART_Init(USART1, &USART_InitStructure);
000160  a901              ADD      r1,sp,#4
000162  4859              LDR      r0,|L1.712|
000164  f7fffffe          BL       USART_Init
;;;114    
;;;115    }
000168  b005              ADD      sp,sp,#0x14
00016a  bd00              POP      {pc}
;;;116    
                          ENDP

                  Encoder_Configration PROC
;;;117    void Encoder_Configration(void)
00016c  b500              PUSH     {lr}
;;;118    {
00016e  b087              SUB      sp,sp,#0x1c
;;;119    	GPIO_InitTypeDef GPIO_InitStructure;
;;;120    	TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;121    	TIM_ICInitTypeDef TIM_ICInitStructure;
;;;122        
;;;123        /*****************     
;;;124        //      A?    B?
;;;125        //TIM1: PA8    PA9  tim1???
;;;126        //TIM2: PA0    PA1 	  ok
;;;127        //TIM3: PA6    PA7	  ok
;;;128        //TIM4: PB6    PB7
;;;129        ******************/
;;;130    	GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_6 | GPIO_Pin_7;
000170  20c3              MOVS     r0,#0xc3
000172  f8ad0018          STRH     r0,[sp,#0x18]
;;;131    	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;
000176  2004              MOVS     r0,#4
000178  f88d001b          STRB     r0,[sp,#0x1b]
;;;132    
;;;133    	GPIO_Init(GPIOA,&GPIO_InitStructure);
00017c  a906              ADD      r1,sp,#0x18
00017e  4851              LDR      r0,|L1.708|
000180  f7fffffe          BL       GPIO_Init
;;;134        
;;;135    
;;;136      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM2, ENABLE);
000184  2101              MOVS     r1,#1
000186  4608              MOV      r0,r1
000188  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;137      RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM3, ENABLE);
00018c  2101              MOVS     r1,#1
00018e  2002              MOVS     r0,#2
000190  f7fffffe          BL       RCC_APB1PeriphClockCmd
;;;138        
;;;139    
;;;140        
;;;141      TIM_DeInit(TIM3);
000194  484d              LDR      r0,|L1.716|
000196  f7fffffe          BL       TIM_DeInit
;;;142      TIM_DeInit(TIM2);
00019a  f04f4080          MOV      r0,#0x40000000
00019e  f7fffffe          BL       TIM_DeInit
;;;143    
;;;144        
;;;145        /* Timer configuration in Encoder mode */
;;;146    	TIM_TimeBaseStructure.TIM_Prescaler = 0x0;  // No prescaling 
0001a2  2000              MOVS     r0,#0
0001a4  f8ad000c          STRH     r0,[sp,#0xc]
;;;147    	TIM_TimeBaseStructure.TIM_Period = 0xffff;  
0001a8  f64f70ff          MOV      r0,#0xffff
0001ac  f8ad0010          STRH     r0,[sp,#0x10]
;;;148    	TIM_TimeBaseStructure.TIM_ClockDivision = TIM_CKD_DIV1;
0001b0  2000              MOVS     r0,#0
0001b2  f8ad0012          STRH     r0,[sp,#0x12]
;;;149    	TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;   
0001b6  f8ad000e          STRH     r0,[sp,#0xe]
;;;150    	
;;;151    	TIM_TimeBaseInit(TIM3, &TIM_TimeBaseStructure);
0001ba  a903              ADD      r1,sp,#0xc
0001bc  4843              LDR      r0,|L1.716|
0001be  f7fffffe          BL       TIM_TimeBaseInit
;;;152      TIM_TimeBaseInit(TIM2, &TIM_TimeBaseStructure);
0001c2  a903              ADD      r1,sp,#0xc
0001c4  f04f4080          MOV      r0,#0x40000000
0001c8  f7fffffe          BL       TIM_TimeBaseInit
;;;153       
;;;154    	TIM_EncoderInterfaceConfig(TIM3, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
0001cc  2300              MOVS     r3,#0
0001ce  461a              MOV      r2,r3
0001d0  2103              MOVS     r1,#3
0001d2  483e              LDR      r0,|L1.716|
0001d4  f7fffffe          BL       TIM_EncoderInterfaceConfig
;;;155      TIM_EncoderInterfaceConfig(TIM2, TIM_EncoderMode_TI12, TIM_ICPolarity_Rising, TIM_ICPolarity_Rising);
0001d8  2300              MOVS     r3,#0
0001da  461a              MOV      r2,r3
0001dc  2103              MOVS     r1,#3
0001de  f04f4080          MOV      r0,#0x40000000
0001e2  f7fffffe          BL       TIM_EncoderInterfaceConfig
;;;156        
;;;157    
;;;158    	TIM_ICStructInit(&TIM_ICInitStructure);
0001e6  4668              MOV      r0,sp
0001e8  f7fffffe          BL       TIM_ICStructInit
;;;159    	TIM_ICInitStructure.TIM_ICFilter = 6;//ICx_FILTER;
0001ec  2006              MOVS     r0,#6
0001ee  f8ad0008          STRH     r0,[sp,#8]
;;;160    	TIM_ICInit(TIM1, &TIM_ICInitStructure);
0001f2  4669              MOV      r1,sp
0001f4  4836              LDR      r0,|L1.720|
0001f6  f7fffffe          BL       TIM_ICInit
;;;161    	TIM_ICInit(TIM2, &TIM_ICInitStructure);
0001fa  4669              MOV      r1,sp
0001fc  f04f4080          MOV      r0,#0x40000000
000200  f7fffffe          BL       TIM_ICInit
;;;162    
;;;163        	
;;;164    	TIM_Cmd(TIM3, ENABLE); 
000204  2101              MOVS     r1,#1
000206  4831              LDR      r0,|L1.716|
000208  f7fffffe          BL       TIM_Cmd
;;;165      TIM_Cmd(TIM2, ENABLE); 
00020c  2101              MOVS     r1,#1
00020e  0788              LSLS     r0,r1,#30
000210  f7fffffe          BL       TIM_Cmd
;;;166    
;;;167    }
000214  b007              ADD      sp,sp,#0x1c
000216  bd00              POP      {pc}
;;;168    
                          ENDP

                  TIM8_PWM_Output PROC
;;;169    void TIM8_PWM_Output(void)
000218  b500              PUSH     {lr}
;;;170    {
00021a  b087              SUB      sp,sp,#0x1c
;;;171    		  TIM_TimeBaseInitTypeDef  TIM_TimeBaseStructure;
;;;172    		  TIM_OCInitTypeDef  TIM_OCInitStructure;  
;;;173    		  
;;;174    		  /* TIM8 Configuration ---------------------------------------------------
;;;175    		   Generates 7 PWM signals with 4 different duty cycles:
;;;176    		   TIM1CLK = 72 MHz, Prescaler = 0, TIM1 counter clock = 72 MHz
;;;177    		   TIM1 frequency = TIM1CLK/(TIM1_Period + 1) = 20.0 KHz
;;;178    		  - TIM1 Channe8_1 & Channel1N duty cycle = TIM1->CCR1 / (TIM1_Period + 1) = 50% 
;;;179    		  - TIM1 Channe8_2 & Channel2N duty cycle = TIM1->CCR2 / (TIM1_Period + 1) = 37.5% 
;;;180    		  - TIM1 Channe8_3 & Channel3N duty cycle = TIM1->CCR3 / (TIM1_Period + 1) = 25%
;;;181    		  - TIM1 Channe8_4 duty cycle = TIM1->CCR4 / (TIM1_Period + 1) = 12.5% 
;;;182    		  ----------------------------------------------------------------------- */  
;;;183    		  /* Time Base configuration */
;;;184    		  TIM_TimeBaseStructure.TIM_Prescaler = 0;
00021c  2000              MOVS     r0,#0
00021e  f8ad0010          STRH     r0,[sp,#0x10]
;;;185    		  TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
000222  f8ad0012          STRH     r0,[sp,#0x12]
;;;186    		  TIM_TimeBaseStructure.TIM_Period = 5000;
000226  f2413088          MOV      r0,#0x1388
00022a  f8ad0014          STRH     r0,[sp,#0x14]
;;;187    		  TIM_TimeBaseStructure.TIM_ClockDivision = 0;
00022e  2000              MOVS     r0,#0
000230  f8ad0016          STRH     r0,[sp,#0x16]
;;;188    		  TIM_TimeBaseStructure.TIM_RepetitionCounter = 0;
000234  f88d0018          STRB     r0,[sp,#0x18]
;;;189    		
;;;190    		  TIM_TimeBaseInit(TIM4, &TIM_TimeBaseStructure);	  //????????
000238  a904              ADD      r1,sp,#0x10
00023a  4826              LDR      r0,|L1.724|
00023c  f7fffffe          BL       TIM_TimeBaseInit
;;;191    		  
;;;192    		  /* Channel 1, 2,3 and 4 Configuration in PWM mode */
;;;193    		  TIM_OCInitStructure.TIM_OCMode = TIM_OCMode_PWM2;
000240  2070              MOVS     r0,#0x70
000242  f8ad0000          STRH     r0,[sp,#0]
;;;194    		  TIM_OCInitStructure.TIM_OutputState = TIM_OutputState_Enable;
000246  2001              MOVS     r0,#1
000248  f8ad0002          STRH     r0,[sp,#2]
;;;195    		  TIM_OCInitStructure.TIM_OutputNState = TIM_OutputNState_Enable;
00024c  2004              MOVS     r0,#4
00024e  f8ad0004          STRH     r0,[sp,#4]
;;;196    		
;;;197    		  TIM_OCInitStructure.TIM_Pulse =2500 ;
000252  f64010c4          MOV      r0,#0x9c4
000256  f8ad0006          STRH     r0,[sp,#6]
;;;198    		
;;;199    		  TIM_OCInitStructure.TIM_OCPolarity = TIM_OCPolarity_Low;
00025a  2002              MOVS     r0,#2
00025c  f8ad0008          STRH     r0,[sp,#8]
;;;200    		  TIM_OCInitStructure.TIM_OCNPolarity = TIM_OCNPolarity_High;
000260  2000              MOVS     r0,#0
000262  f8ad000a          STRH     r0,[sp,#0xa]
;;;201    		  TIM_OCInitStructure.TIM_OCIdleState = TIM_OCIdleState_Set;
000266  f44f7080          MOV      r0,#0x100
00026a  f8ad000c          STRH     r0,[sp,#0xc]
;;;202    		  TIM_OCInitStructure.TIM_OCNIdleState = TIM_OCIdleState_Reset;
00026e  2000              MOVS     r0,#0
000270  f8ad000e          STRH     r0,[sp,#0xe]
;;;203    		  
;;;204    		   TIM_OC1Init(TIM4, &TIM_OCInitStructure);
000274  4669              MOV      r1,sp
000276  4817              LDR      r0,|L1.724|
000278  f7fffffe          BL       TIM_OC1Init
;;;205    		
;;;206    		   TIM_OCInitStructure.TIM_Pulse = 2500;
00027c  f64010c4          MOV      r0,#0x9c4
000280  f8ad0006          STRH     r0,[sp,#6]
;;;207    		   TIM_OC2Init(TIM4, &TIM_OCInitStructure);
000284  4669              MOV      r1,sp
000286  4813              LDR      r0,|L1.724|
000288  f7fffffe          BL       TIM_OC2Init
;;;208    		
;;;209    		  //TIM_OCInitStructure.TIM_Pulse = CCR3_Val;
;;;210    		
;;;211    		  //TIM_OC3Init(TIM8, &TIM_OCInitStructure);
;;;212    		  //TIM_OCInitStructure.TIM_Pulse = CCR4_Val;
;;;213    		
;;;214    		 // TIM_OC4Init(TIM8, &TIM_OCInitStructure);
;;;215    
;;;216    		 TIM_OC1PreloadConfig(TIM4,TIM_OCPreload_Enable);
00028c  2108              MOVS     r1,#8
00028e  4811              LDR      r0,|L1.724|
000290  f7fffffe          BL       TIM_OC1PreloadConfig
;;;217             TIM_OC2PreloadConfig(TIM4,TIM_OCPreload_Enable);
000294  2108              MOVS     r1,#8
000296  480f              LDR      r0,|L1.724|
000298  f7fffffe          BL       TIM_OC2PreloadConfig
;;;218    		
;;;219    		 	 /* TIM8 counter enable */
;;;220    		  TIM_Cmd(TIM4, ENABLE);
00029c  2101              MOVS     r1,#1
00029e  480d              LDR      r0,|L1.724|
0002a0  f7fffffe          BL       TIM_Cmd
;;;221    		
;;;222    		  /* TIM1 Main Output Enable */
;;;223    		  TIM_CtrlPWMOutputs(TIM4, ENABLE);
0002a4  2101              MOVS     r1,#1
0002a6  480b              LDR      r0,|L1.724|
0002a8  f7fffffe          BL       TIM_CtrlPWMOutputs
;;;224    }
0002ac  b007              ADD      sp,sp,#0x1c
0002ae  bd00              POP      {pc}
                          ENDP

                  |L1.688|
                          DCD      SystemCoreClock
                  |L1.692|
                          DCD      0xe000ed18
                  |L1.696|
                          DCD      0xe000e400
                  |L1.700|
                          DCD      0x40010c00
                  |L1.704|
                          DCD      0x40011000
                  |L1.708|
                          DCD      0x40010800
                  |L1.712|
                          DCD      0x40013800
                  |L1.716|
                          DCD      0x40000400
                  |L1.720|
                          DCD      0x40012c00
                  |L1.724|
                          DCD      0x40000800
